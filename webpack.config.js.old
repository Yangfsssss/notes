/** @type {import('webpack').Configuration} */

const path = require('path');
const webpack = require('webpack');
const HtmlWebpackPlugin = require('html-webpack-plugin');

console.log('join',path.join(__dirname, 'dist/', 'react.manifest.json'));
console.log(    'path:', path.resolve(__dirname, 'dist/'));


const config = {
  entry: './src/index.tsx',
  mode: 'none',
  module: {
    rules: [
      {
        test: /\.(js)|(jsx)$|(ts)$|(tsx)$/,
        exclude: /(node_modules)|(bower_components)/,
        loader: 'babel-loader',
        options: {
          presets: ['@babel/react', '@babel/typescript', '@babel/preset-env'],
          plugins: [['@babel/plugin-proposal-decorators', { legacy: true }], '@babel/plugin-proposal-class-properties'],
        },
      },
      {
        test: /\.css$/,
        use: ['style-loader', 'css-loader'],
      },
    ],
  },
  resolve: {
    extensions: ['.tsx', '.ts', '.js', 'jsx'],
  },
  output: {
    path: path.resolve(__dirname, 'dist/'),
    // publicPath: '/',
    filename: 'bundle888.js',
  },
  devServer: {
    port: 3006,
    hot: true,
    historyApiFallback: true,
  },
  plugins: [
    // new webpack.HotModuleReplacementPlugin(),
    // new webpack.SourceMapDevToolPlugin({
    //   filename: '[name].js.map',
    //   exclude: ['bundle.js'],
    // }),

    new HtmlWebpackPlugin({
      template: './src/index.html',
      filename: 'index.html',
    }),

    
    // 第三，告诉 Webpack 使用了哪些动态链接库
    new webpack.DllReferencePlugin({
      // 描述 react 动态链接库的文件内容
      // manifest: require(path.join(__dirname, 'dist/', 'react.manifest.json')),
      manifest: require('./dist/react.manifest.json'),
    }),
  ],
  // devtool: 'source-map',
};

module.exports = config;
